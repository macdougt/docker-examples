#!/usr/bin/env perl
# Start docker image with bash
#
# Usage:
#   docs [image name|image id]
#
# Sample usage:
#   docs my_image_name
#

my $command;
my $image_name_id = shift;
my @extra_flags = @ARGV;

my $extra_flags_string = join(" ", @extra_flags);

if ($image_name_id) {
   print "docker run -i -t $extra_flags_string $image_name_id bash\n";
   system "docker run -i -t $extra_flags_string $image_name_id bash";
} else {
   $command = "docker image ls --filter 'dangling=false'";

   open (PIPE, "$command |") || die "Sorry, I couldn't open pipe.\n";
   while (<PIPE>) {
      next if /^\s*REPOSITORY/;
      chomp($_);
      push(@list, $_);
   }
   close PIPE;

   my $chosen_image_info = &getPick(\@list);
   print "Bashing $chosen_image_info\n";

   # Get the ID of the chosen image
   my @image_info = split /\s+/, $chosen_image_info;
   my $chosen_id = $image_info[2];
   my $chosen_name = $image_info[0];
   print "docker run -i -t $extra_flags_string $chosen_id bash  [$chosen_name]\n";
   system "docker run -i -t $extra_flags_string $chosen_id bash";
}
# Print an interactive choice from a given list
sub getPick {
   my $ra_list = shift;
   if ($#{$ra_list} > 0) {
     print STDERR "List:\n";
     # Reverse sort
     for (my $i=$#{$ra_list}; $i >= 0; $i--) {
       print STDERR ($i+1);
       print STDERR ") $$ra_list[$i]\n";
     }
     print STDERR "Make your choice\n";
     while (1) {
       my $choice = <>;
       if ($choice =~ /\d+/) {
         return $$ra_list[$choice-1];
       } elsif ($choice =~ /\w/) {
         chomp($choice);
      	 for (my $i=$#{$ra_list}; $i >= 0; $i--) {
           if ($$ra_list[$i] =~ /$choice/) {
             print STDERR ($i+1);
             print STDERR ") $$ra_list[$i]\n";
           }
         }
       }
     }
   } elsif ($#{$ra_list} == 0) {
        return $$ra_list[0];
   } else {
        print STDERR "No list\n";
   }
}
